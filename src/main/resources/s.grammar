# generative grammar v1.0
# generating replacement part of transformaiton
#
<start> ::= (strCons <initialDeclStmt> <termStrList>)
#
# 50/50 chances to have single instruction or more
<termStrList> ::= (singleton <termStmt>) | (strCons <stmt> <termStrList>) | (strCons <termStmt> <strList>)
#
# 1 of 2 (prev 2 of 5) a chance to select a loop
<termStmt> ::= <termIfStmt> | <termIfStmt> | <termIfStmt> | <termWhileStmt> | <termWhileStmt> | <termWhileStmt>
<termIfStmt> ::= (if <boolExpr> <termStmts>) | (if <boolExpr> <termStmts>) | (ifElse <boolExpr> <termStmts> <stmts>) | (ifElse <boolExpr> <stmts> <termStmts>) 
<termWhileStmt> ::= (while <boolExpr> <termLoopStmts>) | (doWhile <boolExpr> <termLoopStmts>)
# 
#
#here we increase chance of term node metaStmtsRule
# chances for append/prepend is 2 of 3
#
# chances to terminate is 1 of 2
<termStmts> ::= <metaStmtsRule> | <termStmt> | (prepend <stmt> <nl> <termStmts>) | (append <stmt> <nl> <termStmts>)
#
# chances to terminate is 1 of 2
<termLoopStmts> ::= <metaStmtsRule> | <termLoopStmt> | (prepend <loopStmt> <nl> <termLoopStmts>) | (append <loopStmt> <nl> <termLoopStmts>)
#
<termLoopStmt> ::= <termLoopIfStmt> | <termLoopIfStmt> | <termLoopIfStmt> | <termLoopWhileStmt> | <termLoopWhileStmt> | <termLoopWhileStmt>
<termLoopIfStmt> ::= (if <boolExpr> <termLoopStmts>) | (if <boolExpr> <termLoopStmts>) | (ifElse <boolExpr> <termLoopStmts> <loopStmts>) | (ifElse <boolExpr> <loopStmts> <termLoopStmts>)
<termLoopWhileStmt> ::= (while <boolExpr> <termLoopStmts>) | (doWhile <boolExpr> <termLoopStmts>)
#
#
<initialDeclStmt> ::= (toStmt <initialDecl>)
<initialDecl> ::= (declWithInit <type> <metaVarOnly> <mathExprWithoutMetaVar>)
<metaVarOnly> ::= (metaVar)
#
#<start> ::= <strList>
#<strList> ::= (strEmptyList) 
#
<strList> ::= (singleton <stmt>)
<strList> ::= (strCons <stmt> <strList>)
#
#prebound meta variables in initial for pattern matching
#extends this for experimentation with meta-vars
#<type> ::= (javaType)
<type> ::= (metaType)
<var> ::= (metaVar) | (contextVar)
<decl> ::= (declWithInit <type> <var> <mathExpr>)
#
#extend this with gp generated decls
#<expr> ::= <boolExpr> | <mathExpr>
#
#important that the chance to go to bool comp is 50% here only
#<boolExpr> ::= (metaCondExpr) | <boolExprRec> 
<boolExpr> ::= <boolExprRec> | <boolMath> | <boolMath> | (metaCondExpr)
<boolExprRec> ::= (not <boolExpr>) | (and <boolExpr> <boolExpr>)
<boolMath> ::= (ls <mathExpr> <mathExpr>) | (eq <mathExpr> <mathExpr>)
<assignExpr> ::= (assign <var> <mathExpr>)
#
<mathExprWithoutMetaVar> ::= (number) | (contextVar) | (initExpr) | <mathExprWithoutMetaVarRec>
<mathExprWithoutMetaVarRec> ::= (add <mathExprWithoutMetaVar> <mathExprWithoutMetaVar>) | (sub <mathExprWithoutMetaVar> <mathExprWithoutMetaVar>)
#
#again - a chance to go rec is 25%
<mathExpr> ::= (number) | <var> | (metaExpr) | <mathExprRec>
<mathExprRec> ::= (add <mathExpr> <mathExpr>) | (sub <mathExpr> <mathExpr>)
#
# term statement is more preferable - 50% chance - prevents infinite tree generation
<stmt> ::= (toStmt <castableToStmt>) | <stmtIfRec> | <stmtIfRec> | <stmtWhileRec> | <stmtWhileRec> | (toStmt <castableToStmt>)
<stmtIfRec> ::= (if <boolExpr> <stmts>) | (if <boolExpr> <stmts>) | (ifElse <boolExpr> <stmts> <stmts>) | (ifElse <boolExpr> <stmts> <stmts>)
<stmtWhileRec> ::= (while <boolExpr> <loopStmts>) | (doWhile <boolExpr> <loopStmts>)
<castableToStmt> ::= <assignExpr> | (incExpr)
#
<stmts> ::= (metaStmts) | <stmt> | (prepend <stmt> <nl> <stmts>) | (append <stmt> <nl> <stmts>)
#
#building grammar in reverse order 
#based on requirement that metaStmts should mandatory be in our tree
#
#this is final rule
<metaStmtsRule> ::= (metaStmts) 
#
#1 of 3 chance to append, then again 1 of 3 chance to select 
<loopStmt> ::= <loopStmtTerm> | <loopStmtIfRec> | <loopStmtIfRec> | <loopStmtWhileRec> | <loopStmtWhileRec> | <loopStmtTerm>
<loopStmtIfRec> ::= (if <boolExpr> <loopStmts>) | (if <boolExpr> <loopStmts>) | (ifElse <boolExpr> <loopStmts> <loopStmts>) | (ifElse <boolExpr> <loopStmts> <loopStmts>)
<loopStmtWhileRec> ::= (while <boolExpr> <loopStmts>) | (doWhile <boolExpr> <loopStmts>)
<loopStmtBreak> ::= (break) | (continue)
<loopStmtTerm> ::= (toStmt <castableToStmt>) | (toStmt <castableToStmt>) | (toStmt <castableToStmt>) | <loopStmtBreak>
#
<loopStmts> ::= (metaStmts) | <loopStmt> | (prepend <loopStmt> <nl> <loopStmts>) | (append <loopStmt> <nl> <loopStmts>)
#
<nl> ::= (nl)